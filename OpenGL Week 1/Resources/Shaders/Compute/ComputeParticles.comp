#version 460 core

#define WORK_GROUP_SIZE_X 128

layout (local_size_x = WORK_GROUP_SIZE_X,
        local_size_y = 1,
        local_size_z = 1
       ) in;

layout (std430, binding = 0) buffer PositionLifeBuffer { vec4 PositionLife[]; };
layout (std430, binding = 1) buffer VelocityBuffer { vec4 Velocity[]; };

uniform int SeedLife;
uniform int SeedX;
uniform int SeedY;
uniform int SeedZ;
uniform vec4 VelocityLifeChange;
uniform vec3 EmitterOrigin;

float RandomValue(uint Id, int Seed)
{
    float RandomValue;
    int Noise = int(Id) * Seed;
    Noise = (Noise << 13) ^ Noise;

    int T = (Noise * (Noise * Noise * 15731 + 789221) + 1376312589) & 0x7fffffff;
    RandomValue = 1.0f - float(T) * 0.93132257461548515625e-9f;
    return RandomValue;
}

void ResetParticle(uint Index)
{
    float LifeModifier = 5.0f;
    float Speed_XZ = 8.0f;
    float Speed_Y = 20.0f;

    PositionLife[Index] = vec4(EmitterOrigin.xyz,
        (RandomValue(Index, SeedLife) + 1) * 0.5f * LifeModifier);

    Velocity[Index] = vec4(
        Speed_XZ * RandomValue(Index, SeedX),
        Speed_Y * (RandomValue(Index, SeedY) + 1.0f) * 0.5f + 10.0f,
        Speed_XZ * RandomValue(Index, SeedZ),
        0.0f);
}

void main()
{
    uint Index = gl_GlobalInvocationID.x;

    Velocity[Index].xyz += VelocityLifeChange.xyz;
    PositionLife[Index].xyz += Velocity[Index].xyz * VelocityLifeChange.w;
    PositionLife[Index].w -= VelocityLifeChange.w;

    if (PositionLife[Index].w <= 0.0f)
    {
        ResetParticle(Index);
    }
}
